import json
import boto3
import datetime
from boto3.session import Session

# Set your SES sender and recipient emails
SENDER = "sender@example.com"
RECIPIENT = "recipient@example.com"
AWS_REGION = "us-west-2"  # Update this with your SES region
SUBJECT = "Non-Compliant IAM Users Report"
CHARSET = "UTF-8"

def max_get_role(account_id):
    # Role ARN mapping
    if account_id == '8999xxxx':
        return 'arn:aws:iam::8999xxxx:role/tf-lambda-security-standards-lambda-role'
    elif account_id == '56999xxxxx':
        return 'arn:aws:iam::56999xxxxx:role/tf-lambda-security-standards-lambda-role'
    elif account_id == '186733691':
        return 'arn:aws:iam::186733691:role/tf-lambda-security-standards-lambda-role'
    else:
        print("Invalid account ID")
        return None

def max_assume_role(account_id):
    # Assumes a role and retrieves temporary credentials
    role_arn = max_get_role(account_id)
    if not role_arn:
        raise ValueError("Role ARN could not be determined")
    
    client = boto3.client('sts')
    session_name = 'lambda_session'
    response = client.assume_role(RoleArn=role_arn, RoleSessionName=session_name)
    
    return Session(
        aws_access_key_id=response['Credentials']['AccessKeyId'],
        aws_secret_access_key=response['Credentials']['SecretAccessKey'],
        aws_session_token=response['Credentials']['SessionToken']
    )

def get_non_compliant_iam_keys(iam_client):
    # Checks IAM access keys and returns non-compliant users
    access_key_max_age = 40
    inactive_age = 90
    non_compliant_users = []

    users = iam_client.list_users()
    for user in users['Users']:
        access_keys = iam_client.list_access_keys(UserName=user['UserName'])
        
        for key in access_keys['AccessKeyMetadata']:
            delta = datetime.datetime.now() - key['CreateDate'].replace(tzinfo=None)
            if (delta.days > access_key_max_age and key['Status'] == 'Active'):
                user_info = {
                    'UserName': user['UserName'],
                    'iam-access-key': key['AccessKeyId'],
                    'access_key_age': f"{delta.days} days"
                }
                non_compliant_users.append(user_info)
            elif (delta.days > inactive_age and key['Status'] == 'Active'):
                if iam_client.get_login_profile(UserName=user['UserName']):
                    iam_client.update_access_key(
                        AccessKeyId=key['AccessKeyId'],
                        Status='Inactive',
                        UserName=user['UserName']
                    )
                    user_info = {
                        'UserName': user['UserName'],
                        'iam-access-key': key['AccessKeyId'],
                        'Access Key Deactivated': 'Done'
                    }
                    non_compliant_users.append(user_info)
    
    return non_compliant_users

def send_email(non_compliant_users):
    # Sends an email with the list of non-compliant users
    client = boto3.client('ses', region_name=AWS_REGION)
    body = "Non-Compliant IAM Users Report:\n\n" + json.dumps(non_compliant_users, indent=4)
    
    try:
        response = client.send_email(
            Destination={'ToAddresses': [RECIPIENT]},
            Message={
                'Body': {'Text': {'Charset': CHARSET, 'Data': body}},
                'Subject': {'Charset': CHARSET, 'Data': SUBJECT},
            },
            Source=SENDER,
        )
        print("Email sent! Message ID:", response['MessageId'])
    except Exception as e:
        print("Error sending email:", e)

def lambda_handler(event, context):
    account_id = event.get('account_id', 'your-default-account-id')
    self_flag = event.get('self_flag', True)
    
    # If not self-account, assume role
    if self_flag:
        iam_client = boto3.client('iam')
    else:
        session = max_assume_role(account_id)
        iam_client = session.client('iam', region_name='us-west-2')

    # Get non-compliant IAM users
    non_compliant_users = get_non_compliant_iam_keys(iam_client)

    # Send email if there are any non-compliant users
    if non_compliant_users:
        send_email(non_compliant_users)
    else:
        print("No non-compliant users found.")
