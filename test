
#!/bin/bash

# Function to prompt for user confirmation
confirm() {
    read -r -p "${1:-Are you sure? [y/N]} " response
    case "$response" in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

# Function to find the first available UID
find_available_uid() {
    local start_uid=1000
    local end_uid=60000
    for (( uid=$start_uid; uid<=$end_uid; uid++ )); do
        if ! id -u $uid &>/dev/null; then
            echo $uid
            return 0
        fi
    done
    echo "No available UID found in the range $start_uid-$end_uid" >&2
    return 1
}

# Color variables
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Prompt to check if the user is an administrator
if ! confirm "Are you an administrator to run this script? [y/N]"; then
    echo -e "${RED}You must be an administrator to run this script. Exiting...${NC}"
    exit 1
fi

# Prompt for the buildhost address
read -p "Enter the buildhost address (user@hostname): " buildhost

# Prompt for the username to create
read -p "Enter the username to create: " username

# Check if the username already exists on the jumphost
if id "$username" &>/dev/null; then
    echo -e "${RED}User $username already exists on the jumphost. Exiting...${NC}"
    exit 1
fi

# Find the first available UID
uid=$(find_available_uid)
if [ $? -ne 0 ]; then
    echo -e "${RED}Failed to find an available UID. Exiting...${NC}"
    exit 1
fi

# Create the user on the jumphost
group="PlatformAdmins"
useradd "$username" -g "$group" -u "$uid" -m -c "PlatformAdmin"
mkdir -p "/home/$username/.ssh"
touch "/home/$username/.ssh/authorized_keys"
chmod 700 "/home/$username/.ssh"
chmod 600 "/home/$username/.ssh/authorized_keys"
chown -R "$username:$group" "/home/$username"

# Prompt for the SSH public key
read -p "Enter the SSH public key for $username: " ssh_key
echo "$ssh_key" > "/home/$username/.ssh/authorized_keys"

# Switch to the user's .ssh directory and generate an SSH key pair
su - "$username" -c "ssh-keygen -t rsa -C '$username' -f /home/$username/.ssh/build_id_rsa -N ''"

# Create the SSH config file and add the configuration
cat <<EOL > "/home/$username/.ssh/config"
Host nonprod-abc.com
    HostName nonprodtools-abc.com
    User $username
    IdentityFile ~/.ssh/build_id_rsa
EOL

# Set the correct permissions for the config file
chmod 600 "/home/$username/.ssh/config"
chown "$username:$group" "/home/$username/.ssh/config"

echo -e "${GREEN}User $username created successfully on the jumphost with UID $uid and SSH key configured.${NC}"
echo "SSH key pair generated: /home/$username/.ssh/build_id_rsa and /home/$username/.ssh/build_id_rsa.pub"
echo "SSH config file created and configured for Host nonprod-abc.com"

# Output the UID and public key information for the buildhost script
public_key=$(cat /home/$username/.ssh/build_id_rsa.pub)
echo -e "${BLUE}Please run the following commands on the buildhost to create the user:${NC}"
echo "sudo /path/to/buildhost_create_user.sh"
echo -e "${YELLOW}You will need the following information:${NC}"
echo -e "${YELLOW}Username: ${GREEN}$username${NC}"
echo -e "${YELLOW}UID: ${GREEN}$uid${NC}"
echo -e "${YELLOW}Public Key: ${GREEN}$public_key${NC}"

# Print the public key for the user to add it on the buildhost
echo
echo -e "${BLUE}Add the following public key to the authorized_keys file of the user on the buildhost:${NC}"
echo -e "${GREEN}$public_key${NC}"
