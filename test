import boto3
from datetime import datetime
from botocore.exceptions import ClientError

# Initialize AWS clients
ec2_client = boto3.client('ec2')
ses_client = boto3.client('ses')

# SES parameters
SENDER = "your-email@example.com"
RECIPIENT = "recipient-email@example.com"
AWS_REGION = "us-east-1"
SUBJECT = "Unattached EBS Volumes Report"

def lambda_handler(event, context):
    # Fetch unattached EBS volumes
    unattached_volumes = get_unattached_volumes()
    
    if unattached_volumes:
        # Format report in HTML
        report_html = generate_report_html(unattached_volumes)
        
        # Send the report through SES
        response = send_report_via_ses(report_html)
        return response
    else:
        print("No unattached volumes found.")
        return {"status": "No unattached volumes found"}

def get_unattached_volumes():
    volumes = []
    try:
        response = ec2_client.describe_volumes(Filters=[{'Name': 'status', 'Values': ['available']}])
        for volume in response['Volumes']:
            volumes.append({
                'VolumeId': volume['VolumeId'],
                'CreateTime': volume['CreateTime'].strftime("%Y-%m-%d %H:%M:%S"),
                'VolumeType': volume['VolumeType'],
                'SnapshotId': volume.get('SnapshotId', 'N/A'),
                'AvailabilityZone': volume['AvailabilityZone'],
                'State': volume['State']
            })
    except ClientError as e:
        print(f"Error retrieving volumes: {e}")
    return volumes

def generate_report_html(volumes):
    html = """
    <html>
    <head></head>
    <body>
        <h2>Unattached EBS Volumes Report</h2>
        <table border="1">
            <tr>
                <th>Volume ID</th>
                <th>Created Date</th>
                <th>Volume Type</th>
                <th>Snapshot ID</th>
                <th>Availability Zone</th>
                <th>Volume State</th>
            </tr>
    """
    for volume in volumes:
        html += f"""
            <tr>
                <td>{volume['VolumeId']}</td>
                <td>{volume['CreateTime']}</td>
                <td>{volume['VolumeType']}</td>
                <td>{volume['SnapshotId']}</td>
                <td>{volume['AvailabilityZone']}</td>
                <td>{volume['State']}</td>
            </tr>
        """
    html += """
        </table>
    </body>
    </html>
    """
    return html

def send_report_via_ses(report_html):
    try:
        response = ses_client.send_email(
            Source=SENDER,
            Destination={'ToAddresses': [RECIPIENT]},
            Message={
                'Subject': {'Data': SUBJECT},
                'Body': {
                    'Html': {'Data': report_html}
                }
            }
        )
        print("Email sent! Message ID:", response['MessageId'])
        return {"status": "Email sent", "MessageId": response['MessageId']}
    except ClientError as e:
        print(f"Error sending email: {e}")
        return {"status": "Error", "error": str(e)}
