
import boto3
import datetime
import os 
from datetime import timedelta, date

def create_ebs_snapshot(volume, tags):
    snapshot_tag_deletion_dt = (datetime.datetime.today() + datetime.timedelta(days=5)).strftime('%m-%d-%Y')
    new_tag_spec = [
        {
            'Key': 'ebs_snapshot_created_by',
            'Value': 'lambda_automated_snapshot'
        },
        {
            'Key': 'Scheduled_deletion_date',
            'Value': str(snapshot_tag_deletion_dt)
        }
    ]
    if tags is not None:
        snapshot_tags = tags + new_tag_spec
    else:
        snapshot_tags = new_tag_spec
    snapshot = volume.create_snapshot(Description='Lambda automated snapshot', TagSpecifications=[{'ResourceType': 'snapshot', 'Tags': snapshot_tags}])
    print("Snapshot creation successful")

def tag_volume_delete_date(volume, tags):
    delete_date = datetime.date.today() + datetime.timedelta(days=5)
    delete_fmt = delete_date.strftime('%m-%d-%Y')
    vol_tag_spec = [
        {
            'Key': 'Scheduled_deletion_date',
            'Value': str(delete_fmt)
        }
    ]
    volume.create_tags(Tags=vol_tag_spec)

def volume_tag_check(ec2):
    vol_list = list(ec2.volumes.filter(Filters=[{'Name': 'tag:Scheduled_deletion_date', 'Values': ['*']}]))

    for vol in vol_list:
        vol_id = vol.id
        if vol.state != 'available':
            client = boto3.client('ec2')
            client.delete_tags(Resources=[vol_id], Tags=[{"Key": 'Scheduled_deletion_date'}])

def snap_check_delete(ec2, todaydate):
    print('Checking snapshots that need to be deleted')
    snap_list = list(ec2.snapshots.filter(Filters=[{'Name': 'tag:Scheduled_deletion_date', 'Values': ['*']}]))

    for snap in snap_list:
        snap_id = snap.id
        print('Snapshot ID', snap_id)
        if snap.tags:
            for tag in snap.tags:
                if tag['Key'] == 'Scheduled_deletion_date':
                    snap_delete_date = tag['Value']
                    output = todaydate >= snap_delete_date
                    if output:
                        print("Snapshot to delete", snap_id)
                        snap.delete()

def delete_unused_ebs_volume(days):
    ec2 = boto3.resource('ec2')
    volume_tag_check(ec2)

    volumes = ec2.volumes.filter(Filters=[{'Name': 'status', 'Values': ['available']}])

    volume_max_age = 0
    todaydate = (datetime.datetime.today()).strftime('%m-%d-%Y')

    total_volumes_checked = len(list(ec2.volumes.filter(Filters=[{'Name': 'status', 'Values': ['available']}])))

    for v in volumes:
        tags_key = [tag['Key'] for tag in v.tags] if v.tags else []
        if 'delete' not in tags_key:
            delta = (datetime.datetime.now() - datetime.datetime.strptime(v.create_time.strftime("%Y-%m-%d"), '%Y-%m-%d')).days

            if delta > volume_max_age:
                if v.tags:
                    add_schedule_deletion_tag = True
                    for tag in v.tags:
                        if tag['Key'] == 'Scheduled_deletion_date':
                            add_schedule_deletion_tag = False
                            delete_date = tag['Value']
                            output = todaydate >= delete_date
                            if output:
                                update_tags = [i for i in v.tags if i['Key'] != "Scheduled_deletion_date"]
                                create_ebs_snapshot(v, update_tags)
                                print("Volume to delete", v.id)
                                v.delete()
                                snap_check_delete(ec2, todaydate)
                    if add_schedule_deletion_tag:
                        tag_volume_delete_date(v, v.tags)
                else:
                    tag_volume_delete_date(v, v.tags)

    snap_check_delete(ec2, todaydate)
    
    return total_volumes_checked  # Return total volumes checked #

def lambda_handler(event, context):
    volume_age_in_days = os.environ['EBS_VOLUME_AGE']
    total_volumes_checked = delete_unused_ebs_volume(volume_age_in_days)
    volume_report(total_volumes_checked)  # Pass total volumes checked #

def volume_report(total_volumes_checked):  # Accept total volumes checked #
    ec2 = boto3.resource('ec2')
    aws_account = os.environ['AWS_ACCOUNT']

    vol_list = list(ec2.volumes.filter(Filters=[{'Name': 'tag:Scheduled_deletion_date', 'Values': ['*']}]))

    vol_list1 = list(ec2.volumes.filter(Filters=[{'Name': 'tag:delete', 'Values': ['no']}]))

    output = "<html><head><br/>"
    output += "<style>table, th, td {border: 1px solid black;border-collapse: collapse;} th, td {padding: 5px;text-align: left;}</style>"
    output += "</head><body><h3 style=color:#0000FF>AWS Account " + str(aws_account) + " Unattached Volumes.</h3>"

    # Add total number of volumes checked #
    output += f"<p><b>Total number of volumes checked:</b> {total_volumes_checked}</p>"

    # Add number of volumes scheduled for deletion #
    output += f"<p><b>Number of volumes scheduled for deletion:</b> {len(vol_list)}</p>"

    # Add number of volumes exempted from deletion #
    output += f"<p><b>Number of volumes exempted from deletion:</b> {len(vol_list1)}</p>"

    # Add historical trends suggestion #
    output += "<p><b>Historical Trends:</b> Check CloudWatch for historical data and trends over time.</p>"

    # Table for volumes scheduled for deletion #
    output += "<br><b style=color:0000FF>Volumes scheduled for deletion</b>"
    output += "<table style=width:100%><tr><th>Volume id</th><th>Tag-Application</th><th>Scheduled_deletion_date</th></tr>"
    for vol in vol_list:
        vol_id = vol.id
        application_tag = ""
        delete_date = ""
        for tag in vol.tags:
            if tag['Key'] == "Scheduled_deletion_date":
                delete_date = tag['Value']
            if tag['Key'] == 'Application' or tag['Key'] == 'application':
                application_tag = tag['Value']
        output += f"<tr><td>{vol_id}</td><td>{application_tag}</td><td>{delete_date}</td></tr>"
    output += "</table>"

    # Table for volumes exempted from deletion #
    output += "<br><b style=color:0000FF>Volumes exempted from deletion</b>"
    output += "<table style=width:100%><tr><th>Volume id</th><th>Tag-Application</th><th>delete tag volume</th></tr>"
    for vol1 in vol_list1:
        vol_id = vol1.id
        application_tag = ""
        delete_tag = ""
        for tag in vol1.tags:
            if tag['Key'] == 'delete':
                delete_tag = tag['Value']
            if tag['Key'] == 'Application' or tag['Key'] == 'application':
                application_tag = tag['Value']
        output += f"<tr><td>{vol_id}</td><td>{application_tag}</td><td>{delete_tag}</td></tr>"
    output += "</table></body></html>"

    ses_email('Config Report', output)

def ses_email(subject, body):
    aws_account = os.environ['AWS_ACCOUNT']
    subject = "AWS Account: " + aws_account + ". EBS cleanup Report"
    client = boto3.client('ses')
    response = client.send_email(
        Destination={
            'ToAddresses': [
                'anilsoni181@gmail.com'
            ],
        },
        Message={
            'Body': {
                'Html': {
                    'Charset': 'UTF-8',
                    'Data': body,
                },
                'Text': {
                    'Charset': 'UTF-8',
                    'Data': body,
                },
            },
            'Subject': {
                'Charset': 'UTF-8',
                'Data': subject,
            },
        },
        Source='anilsoni181@gmail.com'
    )
    print("Email sent successfully")
